from PyQt5.QtCore import Qt
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import requests


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 450)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 650, 450))
        self.label.setText("")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))


class MyWidget(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        geocoder_request = "http://geocode-maps.yandex.ru/1.x/" \
                           "?apikey=40d1649f-0493-4b70-98ba-98533de7710b&" \
                           "geocode=Австралия&format=json"

        response = requests.get(geocoder_request)
        if response:
            json_response = response.json()

            toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
            toponym_cords = toponym["Point"]["pos"]
            self.cords = toponym_cords.split()
            self.delta = 0.35
            map_request = f"https://static-maps.yandex.ru/1.x/?ll={self.cords[0]},{self.cords[1]}&spn={self.delta},{self.delta}&l=map"
            self.cords_x, self.cords_y = float(self.cords[0]), float(self.cords[1])
            response = requests.get(map_request)
            if not response:
                print("Ошибка выполнения запроса:")
                print(map_request)
                print("Http статус:", response.status_code, "(", response.reason, ")")
                sys.exit(1)

        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        self.pix = QtGui.QPixmap('map.png')
        self.label.setPixmap(self.pix)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Up and (self.cords_y + 5) < 90:
            self.cords_y += 5
        if event.key() == Qt.Key_Down and (self.cords_y - 5) > -90:
            self.cords_y -= 5
        if event.key() == Qt.Key_Right and (self.cords_x + 5) < 180:
            self.cords_x += 5
        if event.key() == Qt.Key_Left and (self.cords_x - 5) > -180:
            self.cords_x -= 5
        if event.key() == Qt.Key_PageUp and (self.delta - 1) > 0:
            self.delta -= 1
        if event.key() == Qt.Key_PageDown and (self.delta + 1) < 90:
            self.delta += 1
        map_request = f"https://static-maps.yandex.ru/1.x/?ll={self.cords_x},{self.cords_y}&spn={self.delta},{self.delta}&l=map"
        self.cords_x, self.cords_y = float(self.cords_x), float(self.cords_y)
        response = requests.get(map_request)
        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        self.pix = QtGui.QPixmap('map.png')
        self.label.setPixmap(self.pix)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = MyWidget()
    window.show()
    sys.exit(app.exec_())
